//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/UI/Player/Entradas.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Entradas: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Entradas()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Entradas"",
    ""maps"": [
        {
            ""name"": ""Movimiento"",
            ""id"": ""3fe14220-a207-4265-99cc-91dc127c7efc"",
            ""actions"": [
                {
                    ""name"": ""Salto"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2178b45e-9613-459c-a65a-f6b98b7795e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff67bcd8-f036-4ffa-a1d4-c8b7c13a7c3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80b52e0b-c93c-41d3-bb02-06569f607346"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Salto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b82fd5a-5dd3-4d6e-b596-2b039dff3264"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""39f9bcb3-7a7a-49b4-89cc-05e292ba868c"",
            ""actions"": [
                {
                    ""name"": ""AtaquePrincipal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3ac1a180-6857-48a3-85cd-058a7c264ce6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AtaqueSecundario"",
                    ""type"": ""PassThrough"",
                    ""id"": ""08f5b95b-3af7-483f-b60d-adcb61105b4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pausar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""33404645-f83a-4a2e-a2f7-673e281b73f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""fdbed439-a718-4139-8e6d-5ed9bda8004c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bacfbc07-5565-43c8-ba30-0631fcf99d3f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtaqueSecundario"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cb787dd-0bbc-4dae-bee4-9670fe06b618"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtaquePrincipal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8035f6ab-24d8-4da4-9a38-4b226683238e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08a556e9-fa5e-4ef5-ab37-a534a1a1c33b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movimiento
        m_Movimiento = asset.FindActionMap("Movimiento", throwIfNotFound: true);
        m_Movimiento_Salto = m_Movimiento.FindAction("Salto", throwIfNotFound: true);
        m_Movimiento_Dash = m_Movimiento.FindAction("Dash", throwIfNotFound: true);
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_AtaquePrincipal = m_Gameplay.FindAction("AtaquePrincipal", throwIfNotFound: true);
        m_Gameplay_AtaqueSecundario = m_Gameplay.FindAction("AtaqueSecundario", throwIfNotFound: true);
        m_Gameplay_Pausar = m_Gameplay.FindAction("Pausar", throwIfNotFound: true);
        m_Gameplay_Interactuar = m_Gameplay.FindAction("Interactuar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movimiento
    private readonly InputActionMap m_Movimiento;
    private List<IMovimientoActions> m_MovimientoActionsCallbackInterfaces = new List<IMovimientoActions>();
    private readonly InputAction m_Movimiento_Salto;
    private readonly InputAction m_Movimiento_Dash;
    public struct MovimientoActions
    {
        private @Entradas m_Wrapper;
        public MovimientoActions(@Entradas wrapper) { m_Wrapper = wrapper; }
        public InputAction @Salto => m_Wrapper.m_Movimiento_Salto;
        public InputAction @Dash => m_Wrapper.m_Movimiento_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Movimiento; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovimientoActions set) { return set.Get(); }
        public void AddCallbacks(IMovimientoActions instance)
        {
            if (instance == null || m_Wrapper.m_MovimientoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovimientoActionsCallbackInterfaces.Add(instance);
            @Salto.started += instance.OnSalto;
            @Salto.performed += instance.OnSalto;
            @Salto.canceled += instance.OnSalto;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMovimientoActions instance)
        {
            @Salto.started -= instance.OnSalto;
            @Salto.performed -= instance.OnSalto;
            @Salto.canceled -= instance.OnSalto;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMovimientoActions instance)
        {
            if (m_Wrapper.m_MovimientoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovimientoActions instance)
        {
            foreach (var item in m_Wrapper.m_MovimientoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovimientoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovimientoActions @Movimiento => new MovimientoActions(this);

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_AtaquePrincipal;
    private readonly InputAction m_Gameplay_AtaqueSecundario;
    private readonly InputAction m_Gameplay_Pausar;
    private readonly InputAction m_Gameplay_Interactuar;
    public struct GameplayActions
    {
        private @Entradas m_Wrapper;
        public GameplayActions(@Entradas wrapper) { m_Wrapper = wrapper; }
        public InputAction @AtaquePrincipal => m_Wrapper.m_Gameplay_AtaquePrincipal;
        public InputAction @AtaqueSecundario => m_Wrapper.m_Gameplay_AtaqueSecundario;
        public InputAction @Pausar => m_Wrapper.m_Gameplay_Pausar;
        public InputAction @Interactuar => m_Wrapper.m_Gameplay_Interactuar;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @AtaquePrincipal.started += instance.OnAtaquePrincipal;
            @AtaquePrincipal.performed += instance.OnAtaquePrincipal;
            @AtaquePrincipal.canceled += instance.OnAtaquePrincipal;
            @AtaqueSecundario.started += instance.OnAtaqueSecundario;
            @AtaqueSecundario.performed += instance.OnAtaqueSecundario;
            @AtaqueSecundario.canceled += instance.OnAtaqueSecundario;
            @Pausar.started += instance.OnPausar;
            @Pausar.performed += instance.OnPausar;
            @Pausar.canceled += instance.OnPausar;
            @Interactuar.started += instance.OnInteractuar;
            @Interactuar.performed += instance.OnInteractuar;
            @Interactuar.canceled += instance.OnInteractuar;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @AtaquePrincipal.started -= instance.OnAtaquePrincipal;
            @AtaquePrincipal.performed -= instance.OnAtaquePrincipal;
            @AtaquePrincipal.canceled -= instance.OnAtaquePrincipal;
            @AtaqueSecundario.started -= instance.OnAtaqueSecundario;
            @AtaqueSecundario.performed -= instance.OnAtaqueSecundario;
            @AtaqueSecundario.canceled -= instance.OnAtaqueSecundario;
            @Pausar.started -= instance.OnPausar;
            @Pausar.performed -= instance.OnPausar;
            @Pausar.canceled -= instance.OnPausar;
            @Interactuar.started -= instance.OnInteractuar;
            @Interactuar.performed -= instance.OnInteractuar;
            @Interactuar.canceled -= instance.OnInteractuar;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IMovimientoActions
    {
        void OnSalto(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IGameplayActions
    {
        void OnAtaquePrincipal(InputAction.CallbackContext context);
        void OnAtaqueSecundario(InputAction.CallbackContext context);
        void OnPausar(InputAction.CallbackContext context);
        void OnInteractuar(InputAction.CallbackContext context);
    }
}
